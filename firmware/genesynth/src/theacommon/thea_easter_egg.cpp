#include <cstddef>
#include <stdint.h>
#include "thea_easter_egg.h"

namespace thea {

uint8_t tileset[61][8] = {
    {
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b11000000, 0b11111000,
    },
    {
        0b00011110, 0b00011110, 0b11111110, 0b11111110, 0b11111110, 0b11111110, 0b00000000, 0b00000000,
    },
    {
        0b11111111, 0b11111111, 0b11111111, 0b00000000, 0b00000000, 0b11111110, 0b11111110, 0b11111110,
    },
    {
        0b11110000, 0b11111110, 0b11111111, 0b01111111, 0b00001111, 0b00000111, 0b11000111, 0b11100011,
    },
    {
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
    },
    {
        0b00000011, 0b00000011, 0b00000011, 0b00000011, 0b00000011, 0b00000011, 0b00000011, 0b00000011,
    },
    {
        0b00011111, 0b11111111, 0b11111111, 0b11111100, 0b11100000, 0b00000000, 0b00000000, 0b00000000,
    },
    {
        0b11111110, 0b11111110, 0b11111110, 0b11111110, 0b00011110, 0b00011110, 0b00011110, 0b00011110,
    },
    {
        0b10001110, 0b10001110, 0b10001110, 0b10001110, 0b10001111, 0b10001111, 0b10001111, 0b10001111,
    },
    {
        0b00000000, 0b00000000, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b00000000, 0b00000000,
    },
    {
        0b00000011, 0b00000001, 0b00000000, 0b00000000, 0b00000011, 0b00000011, 0b00000011, 0b00000011,
    },
    {
        0b00000000, 0b00000000, 0b00000000, 0b10000000, 0b11110000, 0b11111110, 0b11111111, 0b00111111,
    },
    {
        0b01111000, 0b01111000, 0b01111000, 0b01111000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
    },
    {
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b10000000, 0b10000000, 0b10000000, 0b11000000,
    },
    {
        0b11110011, 0b11110011, 0b11110011, 0b11110011, 0b11110011, 0b11110011, 0b11110011, 0b00000000,
    },
    {
        0b10000000, 0b11010000, 0b11111000, 0b11111110, 0b11111111, 0b01011111, 0b00001111, 0b11000011,
    },
    {
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b11111111, 0b11111111,
    },
    {
        0b11111111, 0b11111111, 0b11111111, 0b00000000, 0b00000000, 0b01111111, 0b01111111, 0b01111111,
    },
    {
        0b11111111, 0b11111111, 0b00011111, 0b10001011, 0b11100001, 0b11110100, 0b11111110, 0b01111111,
    },
    {
        0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b00000000, 0b00000000, 0b00000000, 0b11010000,
    },
    {
        0b00000011, 0b00000011, 0b00000011, 0b00000011, 0b00000011, 0b00000011, 0b00000000, 0b00000000,
    },
    {
        0b11000000, 0b11000000, 0b11000000, 0b11000000, 0b11000000, 0b11000000, 0b11000000, 0b00000000,
    },
    {
        0b01111111, 0b01111111, 0b01111111, 0b01111111, 0b01111000, 0b01111000, 0b01111000, 0b01111000,
    },
    {
        0b11000000, 0b11110000, 0b11111110, 0b11111111, 0b10111111, 0b00010111, 0b01000011, 0b11101000,
    },
    {
        0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b00000000, 0b00000000, 0b00000000, 0b00001011,
    },
    {
        0b11000000, 0b11000000, 0b11000000, 0b11000000, 0b11000000, 0b11000000, 0b00000000, 0b00000000,
    },
    {
        0b00000000, 0b00000000, 0b11000000, 0b11000000, 0b11000000, 0b11000000, 0b00000000, 0b00000000,
    },
    {
        0b00000111, 0b10100000, 0b11111100, 0b11111111, 0b11111111, 0b01111111, 0b00001011, 0b00000001,
    },
    {
        0b11001111, 0b11001111, 0b11001111, 0b11001111, 0b11001111, 0b11001111, 0b00000000, 0b00000000,
    },
    {
        0b11111101, 0b11111111, 0b01111111, 0b00000111, 0b10001111, 0b10001110, 0b10001110, 0b10001110,
    },
    {
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b10000000, 0b11000000, 0b11000000, 0b11000000,
    },
    {
        0b01111000, 0b01111000, 0b01111111, 0b01111111, 0b01111111, 0b01111111, 0b00000000, 0b00000000,
    },
    {
        0b00000011, 0b00000011, 0b00000000, 0b00000000, 0b00000011, 0b00000011, 0b00000011, 0b00000011,
    },
    {
        0b00001111, 0b01111111, 0b11111111, 0b11111110, 0b11110000, 0b11100000, 0b11100011, 0b11000111,
    },
    {
        0b10001000, 0b10000000, 0b10000101, 0b11001111, 0b11111111, 0b11111111, 0b11111000, 0b11000000,
    },
    {
        0b11000000, 0b11000000, 0b11000000, 0b11000000, 0b11000000, 0b11000000, 0b11000000, 0b11000000,
    },
    {
        0b11110011, 0b11110011, 0b11110011, 0b11110011, 0b11110011, 0b11110011, 0b11110011, 0b11110011,
    },
    {
        0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
    },
    {
        0b11110011, 0b11110011, 0b11110011, 0b11110011, 0b11110011, 0b11110011, 0b00000000, 0b00000000,
    },
    {
        0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b00000000, 0b00000000, 0b00000000, 0b11111111,
    },
    {
        0b00011110, 0b00011110, 0b00011110, 0b00011110, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
    },
    {
        0b11100011, 0b10000011, 0b00010111, 0b00111111, 0b11111111, 0b11111100, 0b11111000, 0b10000000,
    },
    {
        0b00000000, 0b00000001, 0b00011111, 0b01111111, 0b11111111, 0b11111110, 0b11110000, 0b00000001,
    },
    {
        0b11101111, 0b11000111, 0b11001111, 0b11001111, 0b11001111, 0b11001111, 0b11001111, 0b11001111,
    },
    {
        0b11000000, 0b11000000, 0b11000000, 0b11000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
    },
    {
        0b11111111, 0b11111111, 0b00000000, 0b00000000, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
    },
    {
        0b11000000, 0b11000000, 0b10000000, 0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
    },
    {
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b11110011,
    },
    {
        0b11111110, 0b00011110, 0b00011110, 0b00011110, 0b00011110, 0b00011110, 0b00011110, 0b00011110,
    },
    {
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000011, 0b00000011,
    },
    {
        0b00000011, 0b00000011, 0b00000011, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
    },
    {
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000001, 0b00000001, 0b00000001, 0b00000011,
    },
    {
        0b11111100, 0b11100000, 0b01000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
    },
    {
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b11000000,
    },
    {
        0b11110011, 0b11110011, 0b00000011, 0b00000011, 0b11110011, 0b11110011, 0b11110011, 0b11110011,
    },
    {
        0b00000000, 0b00000000, 0b00000011, 0b00000011, 0b00000011, 0b00000011, 0b00000000, 0b00000000,
    },
    {
        0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
    },
    {
        0b01111111, 0b01111000, 0b01111000, 0b01111000, 0b01111000, 0b01111000, 0b01111000, 0b01111000,
    },
    {
        0b00000011, 0b00000011, 0b00000011, 0b00000001, 0b00000000, 0b00000010, 0b00000011, 0b00000011,
    },
    {
        0b10111111, 0b11111111, 0b11111101, 0b11101000, 0b01000011, 0b00011111, 0b10111111, 0b11111111,
    },
    {
        0b11110111, 0b11100011, 0b11110011, 0b11110011, 0b11110011, 0b11110011, 0b11110011, 0b11110011,
    },
};

const uint8_t tilemap[128] = {
    4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  53, 35, 35, 21, 26, 44, 26, 44, 13, 35,
    25, 4,  30, 46, 4,  4,  47, 36, 54, 14, 9,  37, 9,  19, 3,  60, 38, 4,  15, 41, 4,  4,  4,  16, 45, 4,
    9,  22, 31, 39, 17, 57, 12, 0,  18, 59, 52, 4,  4,  16, 45, 4,  9,  7,  1,  39, 2,  48, 40, 11, 27, 42,
    6,  4,  4,  16, 45, 4,  9,  37, 9,  24, 33, 43, 28, 23, 29, 8,  34, 4,  4,  49, 32, 4,  55, 50, 55, 50,
    51, 5,  20, 58, 10, 5,  5,  56, 4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
};

void show_thea(U8G2 *display, unsigned long dt) {
  unsigned int num_pixels = (dt / 1000000.0f) * 40;
  uint8_t offset = num_pixels > 50 ? (num_pixels - 50) * 4 : 0;
  if (num_pixels > 40)
    num_pixels = 40;

  for (size_t i = 0; i < sizeof(tilemap) / sizeof(tilemap[0]); i++) {
    uint8_t x = i % 16;
    uint8_t y = i / 16;
    uint8_t letter_tile = x % 4;
    auto &tile = tileset[tilemap[i]];

    // The A is tricky, so adjust its letter tiles
    if (x > 10) {
      letter_tile = x - 10;
    }

    for (uint8_t column = 0; column < 8; column++) {
      for (uint8_t row = 0; row < 8; row++) {
        uint8_t letter_column = letter_tile * 8 + column;
        if (letter_column > num_pixels)
          continue;

        auto pixel = tile[column] >> row & 0x1;
        if (pixel) {
          display->drawPixel((x * 8) + column, (y * 8) + row + offset);
        }
      }
    }
  }
};
};
